            % Solving ODEs
            % Forward Euler Method Empirical Order
clc
clear all
close all
format long

            % Defining the Problem and Exact Function
alpha = 0.05;           
f = @(t,y) (alpha * 0.5) * cos(t) * ( 1 - y.^2 );
y_exact = @(t) ( exp( alpha * sin(t) ) - 1) ./ ( exp (alpha * sin(t)) +1);


y0 = 0;
T = 6*pi;

            % Defining conditions for two solutions with h1 and h2
h1 = 0.1;
h2 = 0.05;

N1 = T/h1;
N2 = T/h2;

un1 = zeros(round(N1+1),1);
tn1 = zeros(round(N1+1),1);

un2 = zeros(size(N2+1));
tn2 = zeros(size(N2+1));

un1(1,1) = y0;
un2(1,1) = y0;

for k = 1 : N1
    un1(k+1,1) = un1(k,1) + h1 * f( tn1(k,1), un1(k,1) );
    tn1(k+1,1) = tn1(k) + h1;
end


for j = 1 : N2
    un2(j+1,1) = un2(j,1) + h2 * f( tn2(j,1), un2(j,1) );
    tn2(j+1,1) = tn2(j) + h2;
end

            % Plotting Euler Method Answers vs. Exact Answer
tmesh1 = [0 : h1 : T]';
tmesh2 = [0 : h2 : T]';

figure(1)
plot(tmesh1,y_exact(tmesh1), 'k', tn1,un1,'r*')
title("Euler Method with h = 0.1 vs. Exact answer")

figure(2)
plot(tmesh2, y_exact(tmesh2), tn2, un2, 'r*')
title("Euler Method with h=0.05 vs. Exact answer")


            % Absolute and Relatve Errors on the Interval

abs_err_EULER1 = abs( y_exact(tn1) - un1 );
abs_err_EULER2 = abs( y_exact(tn2) - un2 );


%size of rel_err_euler1 & 2 are square matrixes, not vectors

rel_err_EULER1 = abs_err_EULER1 ./ y_exact(tn1);
rel_err_EULER2 = abs_err_EULER2 .%% Machine Learning Online Class - Exercise 1: Linear Regression

%  Instructions
%  ------------
% 
%  This file contains code that helps you get started on the
%  linear exercise. You will need to complete the following functions 
%  in this exericse:
%
%     warmUpExercise.m
%     plotData.m
%     gradientDescent.m
%     computeCost.m
%     gradientDescentMulti.m
%     computeCostMulti.m
%     featureNormalize.m
%     normalEqn.m
%
%  For this exercise, you will not need to change any code in this file,
%  or any other files other than those mentioned above.
%
% x refers to the population size in 10,000s
% y refers to the profit in $10,000s
%

%% Initialization
clear ; close all; clc

%% ==================== Part 1: Basic Function ====================
% Complete warmUpExercise.m 
fprintf('Running warmUpExercise ... \n');
fprintf('5x5 Identity Matrix: \n');
warmUpExercise()

fprintf('Program paused. Press enter to continue.\n');
pause;


%% ======================= Part 2: Plotting =======================
fprintf('Plotting Data ...\n')
data = load('ex1data1.txt'); % read comma separated data
X = data(:, 1); y = data(:, 2);
m = length(y); % number of training examples

% Plot Data
% Note: You have to complete the code in plotData.m
plotData(X, y);

fprintf('Program paused. Press enter to continue.\n');
pause;

%% =================== Part 3: Gradient descent ===================
fprintf('Running Gradient Descent ...\n')

X = [ones(m, 1), data(:,1)]; % Add a column of ones to x
theta = zeros(2, 1); % initialize fitting parameters

% Some gradient descent settings
iterations = 1500;
alpha = 0.01;

% compute and display initial cost
computeCost(X, y, theta)

% run gradient descent
theta = gradientDescent(X, y, theta, alpha, iterations);

% print theta to screen
fprintf('Theta found by gradient descent: ');
fprintf('%f %f \n', theta(1), theta(2));

% Plot the linear fit
hold on; % keep previous plot visible
plot(X(:,2), X*theta, '-')
legend('Training data', 'Linear regression')
hold off % don't overlay any more plots on this figure

% Predict values for population sizes of 35,000 and 70,000
predict1 = [1, 1.8] *theta;
fprintf('For population = 18,000, we predict a profit of %f\n',...
    predict1*10000);
predict2 = [1, 2.5] * theta;
fprintf('For population = 25,000, we predict a profit of %f\n',...
    predict2*10000);

fprintf('Program paused. Press enter to continue.\n');
pause;

%% ============= Part 4: Visualizing J(theta_0, theta_1) =============
fprintf('Visualizing J(theta_0, theta_1) ...\n')

% Grid over which we will calculate J
theta0_vals = linspace(-10, 10, 100);
theta1_vals = linspace(-1, 4, 100);

% initialize J_vals to a matrix of 0's
J_vals = zeros(length(theta0_vals), length(theta1_vals));

% Fill out J_vals
for i = 1:length(theta0_vals)
    for j = 1:length(theta1_vals)
	  t = [theta0_vals(i); theta1_vals(j)];    
	  J_vals(i,j) = computeCost(X, y, t);
    end
end


% Because of the way meshgrids work in the surf command, we need to 
% transpose J_vals before calling surf, or else the axes will be flipped
J_vals = J_vals';
% Surface plot
figure;
surf(theta0_vals, theta1_vals, J_vals)
xlabel('\theta_0'); ylabel('\theta_1');

% Contour plot
figure;
% Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100
contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))
xlabel('\theta_0'); ylabel('\theta_1');
hold on;
plot(theta(1), theta(2), 'rx', 'MarkerSize', 10, 'LineWidth', 2);/ y_exact(tn2);



figure(3)
semilogy(tn1,rel_err_EULER1)
title("EULER Method (h=0.1) Relative Error")
figure(4)
semilogy(tn2,rel_err_EULER2)
title("EULER Method (h=0.05) Relative Error")



            % Absolute and Relative Errors at Final Time

abs_error_endpoint_EULER1 = abs( y_exact(tn1(end)) - un1(end) )
abs_error_endpoint_EULER2 = abs( y_exact(tn2(end)) - un2(end) )


rel_error_endpoint_EULER1 = abs( y_exact(tn1(end)) - un1(end)) ./ abs( y_exact( tn1(end) ) )
rel_error_endpoint_EULER2 = abs( y_exact(tn2(end)) - un2(end)) ./ abs( y_exact( tn2(end) ) )


            % Absolute and Relative Maximum Norm on the Interval

abs_err_Norminf_EULER1 = norm( abs_err_EULER1, inf )
abs_err_Norminf_EULER2 = norm( abs_err_EULER2, inf )


rel_err_Norminf_EULER1 = norm( abs_err_EULER1, inf ) / norm( y_exact(tn1),inf )
rel_err_Norminf_EULER2 = norm( abs_err_EULER2, inf ) / norm( y_exact(tn2),inf )


            % Forward Euler Method Empirical Order Calculation 
p_emp = -log2(rel_err_Norminf_EULER2/rel_err_Norminf_EULER1)